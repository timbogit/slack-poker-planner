{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@opentelemetry/api\"","webpack:///external \"shortid\"","webpack:///external \"countly-sdk-nodejs\"","webpack:///external \"@slack/web-api\"","webpack:///external \"util\"","webpack:///external \"express\"","webpack:///external \"@opentelemetry/tracing\"","webpack:///external \"body-parser\"","webpack:///external \"lodash/map\"","webpack:///external \"lodash/find\"","webpack:///external \"@opentelemetry/exporter-jaeger\"","webpack:///external \"pino\"","webpack:///external \"sqlite3\"","webpack:///external \"sqlite\"","webpack:///external \"redis\"","webpack:///external \"express-handlebars\"","webpack:///external \"async_hooks\"","webpack:///external \"lodash/isString\"","webpack:///external \"lodash/pickBy\"","webpack:///external \"lodash/chunk\"","webpack:///external \"lodash/groupBy\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"lodash/uniq\"","webpack:///external \"pretty-ms\"","webpack:///external \"dotenv\"","webpack:///./src/lib/logger.ts","webpack:///./src/lib/sqlite.ts","webpack:///./src/lib/redis.ts","webpack:///./src/lib/trace-decorator.ts","webpack:///./src/team/team-model.ts","webpack:///./src/lib/to.ts","webpack:///./src/routes/oauth.ts","webpack:///./src/session/session-model.ts","webpack:///./src/session/session-controller.ts","webpack:///./src/routes/pp-command.ts","webpack:///./src/routes/interactivity.ts","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","formatters","level","label","number","bindings","getSingleton","asyncLocalStorage","Trace","options","target","propertyName","propertyDesciptor","originalMethod","spanName","args","tracer","getTracer","ctx","getStore","spanOptions","parent","span","startSpan","rv","run","apply","this","then","catch","val","end","err","addEvent","event","message","stack","setStatus","code","UNKNOWN","getSpan","ChannelSettingKey","TeamStore","id","setAttribute","access_token","scope","user_id","setAttributes","db","$id","$name","$access_token","$scope","$user_id","findById","update","teamId","channelId","settingRows","all","$teamId","$channelId","forEach","row","setting_key","setting_value","settings","tasks","keys","map","settingKey","upsertSetting","Promise","$settingKey","$settingValue","to","promise","undefined","req","res","query","error","msg","status","send","slackWebClient","oauthErr","accessResponse","oauth","v2","access","client_id","process","env","SLACK_CLIENT_ID","client_secret","SLACK_CLIENT_SECRET","errorId","ISSUES_LINK","upsertErr","team","upsert","authed_user","COUNTLY_APP_KEY","add_event","count","segmentation","info","render","layout","data","SLACK_APP_ID","TEAM_NAME","buildRedisKey","sessionId","REDIS_NAMESPACE","sessions","persistTimeouts","session","USE_REDIS","clearTimeout","setTimeout","remainingTTL","expiresAt","Date","now","client","setAsync","set","JSON","stringify","persist","remove","delAsync","del","setInterval","previousSessionCount","length","expiredSessionCount","DEFAULT_POINTS","SessionControllerErrorCode","SessionController","votesText","participants","sort","userId","join","chat","postMessage","channel","text","title","attachments","buildMessageAttachments","triggerId","points","isProtected","calculateAverage","protectedCheckboxesOption","type","emoji","averageCheckboxesOption","initialOptions","push","views","open","trigger_id","view","callback_id","private_metadata","submit","close","blocks","block_id","element","placeholder","initial_value","initial_users","hint","optional","initial_options","state","updateMessage","point","Error","SESSION_NOT_ACTIVE","indexOf","ONLY_PARTICIPANTS_CAN_VOTE","votes","voteGroups","a","b","peopleText","userIds","averageText","average","getAverage","ts","rawPostMessageResponse","numericPoints","values","filter","isNumeric","parseFloat","reduce","toFixed","isNaN","isFinite","replace","trim","fallback","color","attachment_type","actions","style","PPCommandRoute","cmd","body","token","SLACK_VERIFICATION_TOKEN","json","response_type","replace_original","split","help","configure","openNewSessionModal","team_id","teamDomain","team_domain","channel_id","channelName","channel_name","userName","user_name","teamGetErr","INTERNAL","NOT_FOUND","APP_INSTALL_LINK","user","settingsFetchErr","channelSettings","fetchSettings","PARTICIPANTS","POINTS","PROTECTED","AVERAGE","custom_points","parse","openModal","stripMentions","InteractivityRoute","payload","interactiveMessage","viewSubmission","callbackId","domain","parts","INVALID_ARGUMENT","action","teamErr","sessionAction","revealSession","cancelSession","vote","createSession","rawPrivateMetadata","privateMetadata","titleInputState","TITLE_REQUIRED","participantsInputState","selected_users","NO_PARTICIPANTS","pointsInputState","pointsStr","match","INVALID_POINTS","otherCheckboxesState","other","selectedOptions","selected_options","option","Number","SESSION_TTL","protected","postMessageResponse","upsertSettingErr","upsertSettings","shouldLog","logLevel","errorMessage","modalErrors","slackErrorCode","needed","userErrorMessage","response_action","errors","voteErr","sessionProtected","sessionCreatorId","revealErr","revealAndUpdateMessage","cancelErr","cancelAndUpdateMessage","config","traceProvider","register","REPORT_TRACES","exporter","serviceName","tags","host","JAEGER_HOST","port","parseInt","JAEGER_PORT","logger","debug","warn","addSpanProcessor","jaegerAgent","setupTracing","filename","DB_FILE","driver","migrate","REDIS_URL","resolve","reject","once","on","scanAsync","scan","cursor","response","mgetAsync","mget","rawSession","server","engine","extname","use","extended","BASE_PATH","router","humanReadableSessionTTL","verbose","next","SLACK_SCOPE","COUNTLY_URL","HUMAN_READABLE_SESSION_TTL","handle","post","url","redirect","initRoutes","listen","PORT","initServer","appKey","init","app_key","main","exit"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","module.exports = require(\"@opentelemetry/api\");","module.exports = require(\"shortid\");","module.exports = require(\"countly-sdk-nodejs\");","module.exports = require(\"@slack/web-api\");","module.exports = require(\"util\");","module.exports = require(\"express\");","module.exports = require(\"@opentelemetry/tracing\");","module.exports = require(\"body-parser\");","module.exports = require(\"lodash/map\");","module.exports = require(\"lodash/find\");","module.exports = require(\"@opentelemetry/exporter-jaeger\");","module.exports = require(\"pino\");","module.exports = require(\"sqlite3\");","module.exports = require(\"sqlite\");","module.exports = require(\"redis\");","module.exports = require(\"express-handlebars\");","module.exports = require(\"async_hooks\");","module.exports = require(\"lodash/isString\");","module.exports = require(\"lodash/pickBy\");","module.exports = require(\"lodash/chunk\");","module.exports = require(\"lodash/groupBy\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"lodash/uniq\");","module.exports = require(\"pretty-ms\");","module.exports = require(\"dotenv\");","import pino from 'pino';\n\nconst logger = pino({\n  formatters: {\n    level: (label, number) => ({ level: label }),\n    bindings: (bindings) => ({}),\n  },\n});\n\nexport default logger;\n","import * as sqlite3 from 'sqlite3';\nimport { open, Database } from 'sqlite';\nimport logger from './logger';\n\nlet db: Database<sqlite3.Database, sqlite3.Statement>;\n\nexport async function init() {\n  if (db) {\n    logger.warn({ msg: `Trying to init sqlite multiple times!` });\n    return db;\n  }\n\n  logger.info({ msg: `Opening sqlite...` });\n  db = await open({\n    filename: process.env.DB_FILE,\n    driver: sqlite3.Database,\n  });\n\n  logger.info({ msg: `Migrating sqlite...` });\n  await db.migrate();\n\n  return db;\n}\n\nexport function getSingleton() {\n  return db;\n}\n","import * as redis from 'redis';\n\nimport logger from './logger';\n\nlet client: redis.RedisClient;\n\nexport async function init() {\n  if (client) {\n    logger.warn({ msg: `Trying to init redis multiple times!` });\n    return client;\n  }\n\n  logger.info({ msg: `Creating redis client...` });\n  client = redis.createClient(process.env.REDIS_URL);\n\n  await new Promise((resolve, reject) => {\n    client.once('ready', resolve);\n    client.once('error', reject);\n  });\n\n  client.on('error', (err) => {\n    logger.error({\n      msg: `Unexpected redis error`,\n      err,\n    });\n  });\n\n  return client;\n}\n\nexport function getSingleton() {\n  return client;\n}\n","import { AsyncLocalStorage } from 'async_hooks';\nimport * as opentelemetry from '@opentelemetry/api';\n\nconst asyncLocalStorage = new AsyncLocalStorage<{\n  span: opentelemetry.Span;\n}>();\n\nexport function Trace(\n  options: {\n    name?: string;\n  } = {}\n) {\n  return (\n    target: any,\n    propertyName: string,\n    propertyDesciptor: TypedPropertyDescriptor<any>\n  ) => {\n    const originalMethod = propertyDesciptor.value;\n    const spanName = options.name || propertyName;\n\n    // Replace the method\n    propertyDesciptor.value = function (...args: any[]) {\n      const tracer = opentelemetry.trace.getTracer('default');\n      const ctx = asyncLocalStorage.getStore();\n      const spanOptions: opentelemetry.SpanOptions = {};\n\n      if (ctx) {\n        spanOptions.parent = ctx.span;\n      }\n\n      // Start a new span for the method\n      const span = tracer.startSpan(spanName, spanOptions);\n\n      // Execute original method\n      try {\n        const rv: any = asyncLocalStorage.run({ span }, () =>\n          originalMethod.apply(this, args)\n        );\n\n        // Auto finish is on, check return value is promise\n        // Instead of `instanceof` check, prefer checking `.then()` method exists on object.\n        // User may be using custom promise polyfill (https://stackoverflow.com/a/27746324)\n        if (typeof rv == 'object' && rv.then && rv.catch) {\n          return rv\n            .then((val: any) => {\n              // Promise resolved\n              span.end();\n              return val;\n            })\n            .catch((err: any) => {\n              // Promise is rejected\n              // https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n              span.addEvent('error', {\n                event: 'error',\n                message: err.message,\n                stack: err.stack,\n                'error.kind': err.name,\n              });\n              span.setStatus({\n                code: opentelemetry.CanonicalCode.UNKNOWN,\n                message: err.message,\n              });\n              span.end();\n              throw err;\n            });\n        }\n\n        // If return value is not promise, finish and return\n        span.end();\n        return rv;\n      } catch (err) {\n        // Method throwed an error\n        // https://github.com/opentracing/specification/blob/master/semantic_conventions.md\n        span.addEvent('error', {\n          event: 'error',\n          message: err.message,\n          stack: err.stack,\n          'error.kind': err.name,\n        });\n        span.setStatus({\n          code: opentelemetry.CanonicalCode.UNKNOWN,\n          message: err.message,\n        });\n        span.end();\n        throw err;\n      }\n    };\n\n    return propertyDesciptor;\n  };\n}\n\nexport function getSpan() {\n  const ctx = asyncLocalStorage.getStore();\n  return ctx?.span;\n}\n","import * as sqlite from '../lib/sqlite';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport interface ITeam {\n  id: string;\n  name: string;\n  access_token: string;\n  scope: string;\n  user_id: string;\n  custom_points: string;\n}\n\nexport enum ChannelSettingKey {\n  PARTICIPANTS = 'participants',\n  POINTS = 'points',\n  PROTECTED = 'protected',\n  AVERAGE = \"average\",\n}\n\nexport interface IChannelSetting {\n  team_id: string;\n  channel_id: string;\n  setting_key: string;\n  setting_value: string;\n}\n\nexport class TeamStore {\n  @Trace({ name: 'team.findById' })\n  static async findById(id: string): Promise<ITeam> {\n    const span = getSpan();\n    span?.setAttribute('id', id);\n    const db = sqlite.getSingleton();\n    return db.get('SELECT * FROM team WHERE id = ?', id);\n  }\n\n  @Trace({ name: 'team.create' })\n  static async create({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `INSERT INTO\n          team (id, name, access_token, scope, user_id)\n        VALUES\n          ($id, $name, $access_token, $scope, $user_id)`,\n      {\n        $id: id,\n        $name: name,\n        $access_token: access_token,\n        $scope: scope,\n        $user_id: user_id,\n      }\n    );\n  }\n\n  @Trace({ name: 'team.update' })\n  static async update({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `UPDATE\n        team\n      SET\n        name = $name,\n        access_token = $access_token,\n        scope = $scope,\n        user_id = $user_id\n      WHERE\n        id = $id`,\n      {\n        $id: id,\n        $name: name,\n        $access_token: access_token,\n        $scope: scope,\n        $user_id: user_id,\n      }\n    );\n  }\n\n  @Trace({ name: 'team.upsert' })\n  static async upsert({\n    id,\n    name,\n    access_token,\n    scope,\n    user_id,\n  }: Pick<ITeam, 'id' | 'name' | 'access_token' | 'scope' | 'user_id'>) {\n    const span = getSpan();\n    span?.setAttributes({ id, name, scope, user_id });\n    const team = await TeamStore.findById(id);\n    if (!team) {\n      await TeamStore.create({ id, name, access_token, scope, user_id });\n    } else {\n      await TeamStore.update({ id, name, access_token, scope, user_id });\n    }\n    return TeamStore.findById(id);\n  }\n\n  @Trace()\n  static async fetchSettings(teamId: string, channelId: string) {\n    const span = getSpan();\n    span?.setAttributes({ teamId, channelId });\n    const db = sqlite.getSingleton();\n    const settingRows = await db.all(\n      `SELECT\n        setting_key,\n        setting_value\n      FROM\n        channel_settings\n      WHERE\n        team_id = $teamId AND\n        channel_id = $channelId;`,\n      {\n        $teamId: teamId,\n        $channelId: channelId,\n      }\n    );\n\n    const rv: { [key: string]: string } = {};\n    settingRows.forEach((row: IChannelSetting) => {\n      rv[row.setting_key] = row.setting_value;\n    });\n\n    return rv;\n  }\n\n  @Trace()\n  static async upsertSettings(\n    teamId: string,\n    channelId: string,\n    settings: { [key: string]: string }\n  ) {\n    const tasks = Object.keys(settings).map((settingKey) =>\n      TeamStore.upsertSetting(\n        teamId,\n        channelId,\n        settingKey,\n        settings[settingKey]\n      )\n    );\n    await Promise.all(tasks);\n  }\n\n  @Trace()\n  static async upsertSetting(\n    teamId: string,\n    channelId: string,\n    key: string,\n    value: string\n  ) {\n    const span = getSpan();\n    span?.setAttributes({ teamId, channelId, key, value });\n    const db = sqlite.getSingleton();\n    await db.run(\n      `INSERT INTO\n        channel_settings (team_id, channel_id, setting_key, setting_value)\n      VALUES (\n        $teamId,\n        $channelId,\n        $settingKey,\n        $settingValue\n      )\n      ON CONFLICT(team_id, channel_id, setting_key)\n      DO UPDATE SET setting_value = $settingValue;`,\n      {\n        $teamId: teamId,\n        $channelId: channelId,\n        $settingKey: key,\n        $settingValue: value,\n      }\n    );\n  }\n}\n","/**\n * Inspired by\n * https://medium.com/javascript-in-plain-english/how-to-avoid-try-catch-statements-nesting-chaining-in-javascript-a79028b325c5\n */\n\nexport async function to<T>(promise: Promise<T>): Promise<[Error, T]> {\n  try {\n    return [undefined, await promise];\n  } catch (err) {\n    return [err, undefined];\n  }\n}\n","import * as express from 'express';\nimport { WebClient } from '@slack/web-api';\nimport logger from '../lib/logger';\nimport Countly from 'countly-sdk-nodejs';\nimport { TeamStore } from '../team/team-model';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\n\nexport class OAuthRoute {\n  /**\n   * GET /oauth\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    // Slack-side error, display error message\n    if (req.query.error) {\n      logger.error({\n        msg: `Could not oauth`,\n        err: req.query.error,\n      });\n      return res.status(500).send(req.query.error);\n    }\n\n    // Installed!\n    if (req.query.code) {\n      const slackWebClient = new WebClient();\n      const [oauthErr, accessResponse] = await to(\n        slackWebClient.oauth.v2.access({\n          client_id: process.env.SLACK_CLIENT_ID,\n          client_secret: process.env.SLACK_CLIENT_SECRET,\n          code: req.query.code as string,\n        })\n      );\n\n      if (oauthErr) {\n        const errorId = generateId();\n        logger.error({\n          msg: `Could not oauth, slack api call failed`,\n          errorId,\n          err: oauthErr,\n        });\n        return res\n          .status(500)\n          .send(\n            `Internal server error, please try again (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n          );\n      }\n\n      const [upsertErr, team] = await to(\n        TeamStore.upsert({\n          id: (accessResponse as any).team.id,\n          name: (accessResponse as any).team.name,\n          access_token: (accessResponse as any).access_token,\n          scope: (accessResponse as any).scope,\n          user_id: (accessResponse as any).authed_user.id,\n        })\n      );\n\n      if (upsertErr) {\n        const errorId = generateId();\n        logger.error({\n          msg: `Could not oauth, sqlite upsert failed`,\n          errorId,\n          err: upsertErr,\n        });\n        res\n          .status(500)\n          .send(\n            `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n          );\n      }\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'added_to_team',\n          count: 1,\n          segmentation: {},\n        });\n      }\n\n      logger.info({\n        msg: `Added to team`,\n        team,\n      });\n\n      return res.render('oauth-success', {\n        layout: false,\n        data: {\n          SLACK_APP_ID: process.env.SLACK_APP_ID,\n          TEAM_NAME: team.name,\n        },\n      });\n    }\n\n    // Unknown error\n    const errorId = generateId();\n    logger.error({\n      msg: `Could not oauth, unknown error`,\n      errorId,\n      query: req.query,\n    });\n    return res\n      .status(500)\n      .send(\n        `Unknown error (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`\n      );\n  }\n}\n","import * as redis from '../lib/redis';\nimport { promisify } from 'util';\nimport { ISession } from './isession';\nimport logger from '../lib/logger';\nimport pickBy from 'lodash/pickBy';\n\n/**\n * Redis key stuff.\n */\nfunction getRedisKeyMatcher() {\n  return `${process.env.REDIS_NAMESPACE}:session:*`;\n}\n\nfunction buildRedisKey(sessionId: string) {\n  return `${process.env.REDIS_NAMESPACE}:session:${sessionId}`;\n}\n\n/**\n * In memory sessions object.\n */\nlet sessions: { [key: string]: ISession } = {};\n\n/**\n * Simple getter by session id.\n */\nexport function findById(id: string): ISession {\n  return sessions[id];\n}\n\n/**\n * Restores all the sessions from redis.\n */\nexport async function restore(): Promise<void> {\n  if (!process.env.USE_REDIS) return;\n\n  // Scan session keys in redis\n  const client = redis.getSingleton();\n  const scanAsync = promisify(client.scan.bind(client));\n\n  const keys: string[] = [];\n  let cursor = '0';\n\n  do {\n    const response = await scanAsync(cursor, 'MATCH', getRedisKeyMatcher());\n\n    cursor = response[0];\n    keys.push(...response[1]);\n  } while (cursor !== '0');\n\n  // Get these keys\n  if (keys.length > 0) {\n    const mgetAsync = promisify(client.mget.bind(client));\n    const rawSessions: string[] = await mgetAsync(keys);\n\n    rawSessions.forEach((rawSession) => {\n      if (!rawSession) return;\n\n      try {\n        const session = JSON.parse(rawSession) as ISession;\n        sessions[session.id] = session;\n      } catch (err) {\n        // NOOP\n      }\n    });\n  }\n\n  logger.info({\n    msg: 'Sessions restored from redis',\n    count: Object.keys(sessions).length,\n  });\n}\n\n/**\n * Holds persisting timeout ids.\n */\nconst persistTimeouts: { [key: string]: number } = {};\n\n/**\n * Updates/inserts the session. This method immediately updates in-memory\n * database. However if redis is being used, we delay (debounce) persisting\n * of a session for 1 second.\n */\nexport function upsert(session: ISession) {\n  sessions[session.id] = session;\n\n  // If using redis, debounce persisting\n  if (process.env.USE_REDIS) {\n    if (persistTimeouts[session.id]) clearTimeout(persistTimeouts[session.id]);\n    persistTimeouts[session.id] = setTimeout(\n      () => persist(session.id),\n      1000\n    ) as any;\n  }\n}\n\n/**\n * Reads a session from in-memory db, and persists to redis.\n */\nasync function persist(sessionId: string) {\n  if (!process.env.USE_REDIS) return;\n\n  // Immediately delete the timeout key\n  delete persistTimeouts[sessionId];\n\n  // If specified session is not in in-memory db,\n  // it must be deleted, so NOOP.\n  const session = sessions[sessionId];\n  if (!session) return;\n\n  // If specified session is expired, NOOP.\n  // We expect that its redis record is/will-be deleted by its TTL.\n  const remainingTTL = session.expiresAt - Date.now();\n  if (remainingTTL <= 0) return;\n\n  const client = redis.getSingleton();\n  const setAsync = promisify(client.set.bind(client));\n  try {\n    await setAsync(\n      buildRedisKey(session.id),\n      JSON.stringify(session),\n      'PX',\n      remainingTTL\n    );\n  } catch (err) {\n    logger.error({\n      msg: 'Could not persist session',\n      err,\n      session,\n      remainingTTL,\n    });\n  }\n}\n\n/**\n * Deletes the session.\n */\nexport async function remove(id: string) {\n  delete sessions[id];\n\n  if (process.env.USE_REDIS) {\n    const client = redis.getSingleton();\n    const delAsync = promisify(client.del.bind(client));\n    await delAsync(buildRedisKey(id));\n  }\n}\n\n/**\n * Set a interval that deletes expired sessions\n */\nsetInterval(() => {\n  const now = Date.now();\n  const previousSessionCount = Object.keys(sessions).length;\n\n  sessions = pickBy(sessions, (session) => {\n    const remainingTTL = session.expiresAt - now;\n    return remainingTTL > 0;\n  });\n\n  const expiredSessionCount =\n    previousSessionCount - Object.keys(sessions).length;\n\n  if (expiredSessionCount > 0) {\n    logger.info({\n      msg: 'Cleaned up expired sessions',\n      count: expiredSessionCount,\n    });\n  }\n}, 60000);\n","import * as SessionStore from './session-model';\nimport { ISession } from './isession';\nimport chunk from 'lodash/chunk';\nimport map from 'lodash/map';\nimport groupBy from 'lodash/groupBy';\nimport { ITeam } from '../team/team-model';\nimport { WebClient } from '@slack/web-api';\nimport logger from '../lib/logger';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport const DEFAULT_POINTS = [\n  '0',\n  '0.5',\n  '1',\n  '2',\n  '3',\n  '5',\n  '8',\n  '13',\n  '20',\n  '40',\n  '100',\n  '∞',\n  '?',\n];\n\nexport enum SessionControllerErrorCode {\n  NO_PARTICIPANTS = 'no_participants',\n  TITLE_REQUIRED = 'title_required',\n  INVALID_POINTS = 'invalid_points',\n  SESSION_NOT_ACTIVE = 'session_not_active',\n  ONLY_PARTICIPANTS_CAN_VOTE = 'only_participants_can_vote',\n}\n\nexport class SessionController {\n  /**\n   * Sends a message for the provided session.\n   * CAUTION: Participants must resolved before using this method.\n   */\n  @Trace()\n  static async postMessage(session: ISession, team: ITeam) {\n    const slackWebClient = new WebClient(team.access_token);\n    const votesText = map(\n      session.participants.sort(),\n      (userId) => `<@${userId}>: awaiting`\n    ).join('\\n');\n\n    return slackWebClient.chat.postMessage({\n      channel: session.channelId,\n      text: `Title: *${session.title}*\\n\\nVotes:\\n${votesText}`,\n      attachments: buildMessageAttachments(session) as any,\n    });\n  }\n\n  /**\n   * Opens a `new session` modal\n   */\n  @Trace()\n  static async openModal({\n    triggerId,\n    team,\n    channelId,\n    title,\n    participants,\n    points,\n    isProtected,\n    calculateAverage,\n  }: {\n    triggerId: string;\n    team: ITeam;\n    channelId: string;\n    title: string;\n    participants: string[];\n    points: string[];\n    isProtected: boolean;\n    calculateAverage: boolean;\n  }) {\n    const slackWebClient = new WebClient(team.access_token);\n\n    const protectedCheckboxesOption = {\n      text: {\n        type: 'plain_text',\n        text: 'Protected (prevent others to cancel or reveal this session)',\n        emoji: true,\n      },\n      value: 'protected',\n    } as any;\n\n    const averageCheckboxesOption = {\n      text: {\n        type: 'plain_text',\n        text: 'Calculate the average (only numeric points will be used)',\n        emoji: true,\n      },\n      value: 'average',\n    } as any;\n\n    let initialOptions = undefined;\n    if (isProtected) {\n      initialOptions = initialOptions || [];\n      initialOptions.push(protectedCheckboxesOption);\n    }\n    if (calculateAverage) {\n      initialOptions = initialOptions || [];\n      initialOptions.push(averageCheckboxesOption);\n    }\n\n    await slackWebClient.views.open({\n      trigger_id: triggerId,\n      view: {\n        callback_id: `newSessionModal:submit`,\n        private_metadata: JSON.stringify({ channelId }),\n        type: 'modal',\n        title: {\n          type: 'plain_text',\n          text: 'Poker Planner',\n          emoji: true,\n        },\n        submit: {\n          type: 'plain_text',\n          text: 'Start New Session',\n          emoji: true,\n        },\n        close: {\n          type: 'plain_text',\n          text: 'Cancel',\n          emoji: true,\n        },\n        blocks: [\n          {\n            type: 'input',\n            block_id: 'title',\n            element: {\n              type: 'plain_text_input',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Write a topic for this voting session',\n                emoji: true,\n              },\n              initial_value: title || '',\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Title',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'participants',\n            element: {\n              type: 'multi_users_select',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Add users',\n                emoji: true,\n              },\n              initial_users: participants,\n              // max_selected_items: 25,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Participants',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'points',\n            element: {\n              type: 'plain_text_input',\n              placeholder: {\n                type: 'plain_text',\n                text: 'Change poker points',\n                emoji: true,\n              },\n              initial_value: points.join(' ') || DEFAULT_POINTS.join(' '),\n            },\n            hint: {\n              type: 'plain_text',\n              text: 'Enter points separated by space',\n              emoji: true,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Points',\n              emoji: true,\n            },\n          },\n          {\n            type: 'input',\n            block_id: 'other',\n            optional: true,\n            element: {\n              type: 'checkboxes',\n              options: [protectedCheckboxesOption, averageCheckboxesOption],\n              initial_options: initialOptions,\n            },\n            label: {\n              type: 'plain_text',\n              text: 'Other',\n              emoji: true,\n            },\n          },\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text:\n                '> :bulb: These options will be *remembered* the next time you create a session *on this channel*.',\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  /**\n   * Updates the session message as revealing all the votes.\n   * And clean-up the session from store.\n   */\n  @Trace()\n  static async revealAndUpdateMessage(\n    session: ISession,\n    team: ITeam,\n    userId: string\n  ) {\n    session.state = 'revealed';\n    await SessionController.updateMessage(session, team, userId);\n    await SessionStore.remove(session.id);\n  }\n\n  /**\n   * Updates the session message as cancelled.\n   * And clean-up the session from store.\n   */\n  @Trace()\n  static async cancelAndUpdateMessage(\n    session: ISession,\n    team: ITeam,\n    userId: string\n  ) {\n    session.state = 'cancelled';\n    await SessionController.updateMessage(session, team, userId);\n    await SessionStore.remove(session.id);\n  }\n\n  /**\n   *\n   */\n  @Trace()\n  static async vote(\n    session: ISession,\n    team: ITeam,\n    userId: string,\n    point: string\n  ) {\n    if (session.state != 'active') {\n      throw new Error(SessionControllerErrorCode.SESSION_NOT_ACTIVE);\n    }\n\n    if (session.participants.indexOf(userId) == -1) {\n      throw new Error(SessionControllerErrorCode.ONLY_PARTICIPANTS_CAN_VOTE);\n    }\n\n    session.votes[userId] = point;\n    session.state =\n      Object.keys(session.votes).length == session.participants.length\n        ? 'revealed'\n        : 'active';\n\n    if (session.state == 'revealed') {\n      await SessionController.updateMessage(session, team); // do not send userId\n      await SessionStore.remove(session.id);\n      logger.info({\n        msg: `Auto revealing votes`,\n        sessionId: session.id,\n        team: {\n          id: team.id,\n          name: team.name,\n        },\n      });\n      return;\n    }\n\n    // Voting is still active\n    await SessionController.updateMessage(session, team);\n    SessionStore.upsert(session);\n  }\n\n  /**\n   * Updates session message according to session state.\n   */\n  @Trace()\n  static async updateMessage(session: ISession, team: ITeam, userId?: string) {\n    const slackWebClient = new WebClient(team.access_token);\n\n    if (session.state == 'revealed') {\n      const voteGroups = groupBy(\n        session.participants,\n        (userId) => session.votes[userId] || 'not-voted'\n      );\n      const votesText = Object.keys(voteGroups)\n        .sort((a, b) => session.points.indexOf(a) - session.points.indexOf(b))\n        .map((point) => {\n          const votes = voteGroups[point];\n          const peopleText =\n            votes.length == 1 ? `1 person` : `${votes.length} people`;\n          const userIds = votes\n            .sort()\n            .map((userId) => `<@${userId}>`)\n            .join(', ');\n\n          if (point == 'not-voted') {\n            return `${peopleText} *did not vote* (${userIds})`;\n          }\n\n          return `${peopleText} voted *${point}* (${userIds})`;\n        })\n        .join('\\n');\n\n      let averageText = '';\n      if (session.average) {\n        const average = SessionController.getAverage(session.votes);\n        averageText = average\n          ? `\\nAverage: ${SessionController.getAverage(session.votes)}`\n          : '';\n      }\n\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: userId\n          ? `Title: *${session.title}* (revealed by <@${userId}>)\\n\\nResult:\\n${votesText}${averageText}`\n          : `Title: *${session.title}*\\n\\nResult:\\n${votesText}${averageText}`,\n        attachments: [],\n      });\n    } else if (session.state == 'cancelled') {\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: userId\n          ? `Title: *${session.title}* (cancelled by <@${userId}>)`\n          : `Title: *${session.title}* (cancelled)`,\n        attachments: [],\n      });\n    } else {\n      const votesText = map(session.participants.sort(), (userId) => {\n        if (session.votes.hasOwnProperty(userId)) {\n          return `<@${userId}>: :white_check_mark:`;\n        }\n\n        return `<@${userId}>: awaiting`;\n      }).join('\\n');\n\n      await slackWebClient.chat.update({\n        ts: session.rawPostMessageResponse.ts,\n        channel: session.rawPostMessageResponse.channel,\n        text: `Title: *${session.title}*\\n\\nVotes:\\n${votesText}`,\n        attachments: buildMessageAttachments(session) as any,\n      });\n    }\n  }\n\n  /**\n   * For given votes, calculate average point\n   */\n  static getAverage(votes: { [key: string]: string }): string | boolean {\n    const numericPoints = Object.values(votes)\n      .filter(SessionController.isNumeric)\n      .map(parseFloat);\n    if (numericPoints.length < 1) return false;\n    return (\n      numericPoints.reduce((a, b) => a + b) / numericPoints.length\n    ).toFixed(1);\n  }\n\n  static isNumeric(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  /**\n   * For a given slack slash-command text, remove mentions\n   */\n  static stripMentions(text: string) {\n    return text\n      .replace(/<@(.*?)>/g, '')\n      .replace(/<!(.*?)>/g, '')\n      .replace(/\\s\\s+/g, ' ')\n      .trim();\n  }\n}\n\nexport function buildMessageAttachments(session: ISession) {\n  const pointAttachments = chunk(session.points, 5).map((points) => {\n    return {\n      text: '',\n      fallback: 'You are unable to vote',\n      callback_id: `vote:${session.id}`,\n      color: '#3AA3E3',\n      attachment_type: 'default',\n      actions: points.map((point) => ({\n        name: 'point',\n        text: point,\n        type: 'button',\n        value: point,\n      })),\n    };\n  });\n\n  return [\n    ...pointAttachments,\n    {\n      text: 'Actions',\n      fallback: 'You are unable to send action',\n      callback_id: `action:${session.id}`,\n      color: '#3AA3E3',\n      attachment_type: 'default',\n      actions: [\n        {\n          name: 'action',\n          text: 'Reveal',\n          type: 'button',\n          value: 'reveal',\n          style: 'danger',\n        },\n        {\n          name: 'action',\n          text: 'Cancel',\n          type: 'button',\n          value: 'cancel',\n          style: 'danger',\n        },\n      ],\n    },\n  ];\n}\n","import * as express from 'express';\nimport logger from '../lib/logger';\nimport Countly from 'countly-sdk-nodejs';\nimport { TeamStore, ChannelSettingKey } from '../team/team-model';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\nimport isString from 'lodash/isString';\nimport { ISlackCommandRequestBody } from '../vendor/slack-api-interfaces';\nimport {\n  SessionController,\n  DEFAULT_POINTS,\n} from '../session/session-controller';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport class PPCommandRoute {\n  /**\n   * POST /slack/pp-command\n   * POST /slack/pp-slash-command\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    const cmd = req.body as ISlackCommandRequestBody;\n\n    if (cmd.token != process.env.SLACK_VERIFICATION_TOKEN) {\n      logger.error({\n        msg: `Could not created session, slack verification token is invalid`,\n        cmd,\n      });\n      return res.json({\n        text: `Invalid slack verification token, please get in touch with the maintainer`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!isString(cmd.text)) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not created session, command.text not string`,\n        errorId,\n        cmd,\n      });\n      return res.json({\n        text:\n          `Unexpected command usage (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const firstWord = cmd.text.trim().split(' ')[0];\n    switch (firstWord) {\n      case 'help': {\n        return PPCommandRoute.help(res);\n      }\n\n      case 'config': {\n        return await PPCommandRoute.configure(cmd, res);\n      }\n\n      default: {\n        return await PPCommandRoute.openNewSessionModal(cmd, res);\n      }\n    }\n  }\n\n  /**\n   * `/pp some task name`\n   */\n  @Trace()\n  static async openNewSessionModal(\n    cmd: ISlackCommandRequestBody,\n    res: express.Response\n  ) {\n    const span = getSpan();\n    span?.setAttributes({\n      teamId: cmd.team_id,\n      teamDomain: cmd.team_domain,\n      channelId: cmd.channel_id,\n      channelName: cmd.channel_name,\n      userId: cmd.user_id,\n      userName: cmd.user_name,\n      text: cmd.text,\n    });\n\n    if (cmd.channel_name == 'directmessage') {\n      return res.json({\n        text: `Poker planning cannot be started in direct messages`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const [teamGetErr, team] = await to(TeamStore.findById(cmd.team_id));\n    if (teamGetErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not created session, could not get the team from db`,\n        errorId,\n        err: teamGetErr,\n        cmd,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamGetErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      logger.info({\n        msg: `Could not created session, team could not be found`,\n        cmd,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${cmd.team_domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    // If permissions are old, show migration message\n    if (\n      team.scope ==\n      'identify,commands,channels:read,groups:read,users:read,chat:write:bot'\n    ) {\n      logger.info({\n        msg: `Migration message`,\n        team: {\n          id: team.id,\n          name: team.name,\n        },\n        user: {\n          id: cmd.user_id,\n          name: cmd.user_name,\n        },\n      });\n      span?.addEvent('show_migration_message');\n      return res.json({\n        text:\n          'Poker Planner has migrated to ' +\n          \"<https://slackhq.com/introducing-a-dramatically-upgraded-slack-app-toolkit|Slack's new app toolkit> \" +\n          'which adds granular permissions for better security. We now depend on bot permissions instead of ' +\n          'user permissions. So that you can explicitly manage which channels/conversations Poker Planner can ' +\n          'access. However, this requires a couple of changes:\\n\\n• In order to obtain new bot permissions ' +\n          'and drop user ones, *you need to reinstall Poker Planner* to your workspace on ' +\n          `<${process.env.APP_INSTALL_LINK}>\\n• Before using \\`/pp\\` command, *Poker Planner app must be ` +\n          'added to that channel/conversation*. You can simply add or invite it by just mentioning the app like ' +\n          '`@poker_planner`. You can also do that from channel/converstion details menu.',\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    /**\n     * From: https://api.slack.com/legacy/interactive-messages\n     *\n     * Responding right away\n     * ---\n     * You must respond within 3 seconds. If it takes your application longer\n     * to process the request, we recommend responding with a HTTP 200 OK\n     * immediately, then use the response_url to respond five times within\n     * thirty minutes.\n     *\n     * Responding incrementally with response_url\n     * ---\n     * Use the response URL provided in the post to:\n     * - Replace the current message\n     * - Respond with a public message in the channel\n     * - Respond with an ephemeral message in the channel that only the\n     * acting user will see\n     *\n     * You'll be able to use a response_url five times within 30 minutes.\n     * After that, it's best to move on to new messages and new interactions.\n     */\n\n    try {\n      // Prepare settings (participants, points...)\n      const [settingsFetchErr, channelSettings] = await to(\n        TeamStore.fetchSettings(team.id, cmd.channel_id)\n      );\n      if (settingsFetchErr) {\n        span?.addEvent('settings_fetch_error', {\n          error: settingsFetchErr.message,\n        });\n      }\n      const settings = {\n        [ChannelSettingKey.PARTICIPANTS]: [] as string[],\n        [ChannelSettingKey.POINTS]: DEFAULT_POINTS,\n        [ChannelSettingKey.PROTECTED]: false,\n        [ChannelSettingKey.AVERAGE]: false,\n      };\n      if (channelSettings?.[ChannelSettingKey.PARTICIPANTS]) {\n        settings[ChannelSettingKey.PARTICIPANTS] = channelSettings[\n          ChannelSettingKey.PARTICIPANTS\n        ].split(' ');\n      }\n      if (team.custom_points) {\n        settings[ChannelSettingKey.POINTS] = team.custom_points.split(' ');\n      }\n      if (channelSettings?.[ChannelSettingKey.POINTS]) {\n        settings[ChannelSettingKey.POINTS] = channelSettings[\n          ChannelSettingKey.POINTS\n        ].split(' ');\n      }\n      if (channelSettings?.[ChannelSettingKey.PROTECTED]) {\n        settings[ChannelSettingKey.PROTECTED] = JSON.parse(\n          channelSettings[ChannelSettingKey.PROTECTED]\n        );\n      }\n      if (channelSettings?.[ChannelSettingKey.AVERAGE]) {\n        settings[ChannelSettingKey.AVERAGE] = JSON.parse(\n          channelSettings[ChannelSettingKey.AVERAGE]\n        );\n      }\n\n      await SessionController.openModal({\n        triggerId: cmd.trigger_id,\n        team,\n        channelId: cmd.channel_id,\n        title: SessionController.stripMentions(cmd.text).trim(),\n        participants: settings[ChannelSettingKey.PARTICIPANTS],\n        points: settings[ChannelSettingKey.POINTS],\n        isProtected: settings[ChannelSettingKey.PROTECTED],\n        calculateAverage: settings[ChannelSettingKey.AVERAGE],\n      });\n\n      // Send acknowledgement back to API -- HTTP 200\n      res.send();\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'new_session_modal_opened',\n          count: 1,\n          segmentation: {},\n        });\n      }\n    } catch (err) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not open modal`,\n        errorId,\n        err,\n        cmd,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: err.message,\n      });\n      return res.json({\n        text:\n          `Could not open modal (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n  }\n\n  /**\n   * `/pp config ...`\n   */\n  static async configure(cmd: ISlackCommandRequestBody, res: express.Response) {\n    return res.json({\n      text:\n        'This command is deprecated. The session settings (points, participants, ...) ' +\n        'are now persisted automatically for each channel/conversation.',\n      response_type: 'ephemeral',\n      replace_original: false,\n    });\n  }\n\n  /**\n   * `/pp help`\n   */\n  static help(res: express.Response) {\n    return res.json({\n      text: ``,\n      response_type: 'ephemeral',\n      replace_original: false,\n      attachments: [\n        {\n          color: '#3AA3E3',\n          text:\n            '`/pp`\\n' + 'Opens a dialog to start a new poker planning session.',\n        },\n        {\n          color: '#3AA3E3',\n          text:\n            '`/pp some topic text`\\n' +\n            'Opens the same dialog, however title input is automatically ' +\n            'filled with the value you provided.',\n        },\n      ],\n    });\n  }\n}\n","import * as express from 'express';\nimport logger from '../lib/logger';\nimport { generate as generateId } from 'shortid';\nimport { to } from '../lib/to';\nimport { TeamStore, ITeam, ChannelSettingKey } from '../team/team-model';\nimport * as SessionStore from '../session/session-model';\nimport { ISession } from '../session/isession';\nimport {\n  SessionController,\n  SessionControllerErrorCode,\n  DEFAULT_POINTS,\n} from '../session/session-controller';\nimport Countly from 'countly-sdk-nodejs';\nimport isEmpty from 'lodash/isEmpty';\nimport {\n  IInteractiveMessageActionPayload,\n  IViewSubmissionActionPayload,\n} from '../vendor/slack-api-interfaces';\nimport uniq from 'lodash/uniq';\nimport find from 'lodash/find';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { Trace, getSpan } from '../lib/trace-decorator';\n\nexport class InteractivityRoute {\n  /**\n   * POST /slack/action-endpoint\n   * POST /slack/interactivity\n   * https://api.slack.com/interactivity/handling#payloads\n   */\n  static async handle(req: express.Request, res: express.Response) {\n    let payload:\n      | IInteractiveMessageActionPayload\n      | IViewSubmissionActionPayload;\n\n    try {\n      payload = JSON.parse(req.body.payload);\n    } catch (err) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not parse action payload`,\n        errorId,\n        body: req.body,\n      });\n      return res.json({\n        text:\n          `Unexpected slack action payload (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (payload.token != process.env.SLACK_VERIFICATION_TOKEN) {\n      logger.error({\n        msg: `Could not process action, invalid verification token`,\n        payload,\n      });\n      return res.json({\n        text: `Invalid slack verification token, please get in touch with the maintainer`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    switch (payload.type) {\n      case 'interactive_message': {\n        await InteractivityRoute.interactiveMessage({ payload, res });\n        return;\n      }\n\n      case 'view_submission': {\n        await InteractivityRoute.viewSubmission({ payload, res });\n        return;\n      }\n\n      default: {\n        const errorId = generateId();\n        logger.error({\n          msg: `Unexpected interactive-message action callbackId`,\n          errorId,\n          payload,\n        });\n        return res.json({\n          text:\n            `Unexpected payload type (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user clicks on a button on message\n   */\n  @Trace()\n  static async interactiveMessage({\n    payload, // action request payload\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      callbackId: payload.callback_id,\n      teamId: payload.team.id,\n      teamDomain: payload.team.domain,\n      userId: payload.user.id,\n      userName: payload.user.name,\n      channelId: payload.channel.id,\n      channelName: payload.channel.name,\n    });\n    const parts = payload.callback_id.split(':');\n\n    if (parts.length != 2) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Unexpected interactive message callback id`,\n        errorId,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n        message: `Unexpected callback_id`,\n      });\n      return res.json({\n        text:\n          `Unexpected interactive message callback id (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const [action, sessionId] = parts;\n    span?.setAttributes({ action, sessionId });\n\n    const session = SessionStore.findById(sessionId);\n\n    if (!session) {\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Session not found',\n      });\n      return res.json({\n        text: `Ooops, could not find the session, it may be expired or cancelled`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    // Get team\n    const [teamErr, team] = await to(TeamStore.findById(payload.team.id));\n\n    if (teamErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not get team`,\n        errorId,\n        err: teamErr,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${payload.team.domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    switch (action) {\n      /**\n       * A user clicked session actions button:\n       * - Reveal\n       * - Cancel\n       */\n      case 'action': {\n        const sessionAction = payload.actions[0].value;\n        span?.setAttributes({ sessionAction });\n\n        if (sessionAction == 'reveal') {\n          await InteractivityRoute.revealSession({\n            payload,\n            team,\n            session,\n            res,\n          });\n        } else if (sessionAction == 'cancel') {\n          await InteractivityRoute.cancelSession({\n            payload,\n            team,\n            session,\n            res,\n          });\n        } else {\n          const errorId = generateId();\n          logger.error({\n            msg: `Unexpected action button clicked`,\n            errorId,\n            sessionAction,\n            payload,\n          });\n          span?.setAttribute('error.id', errorId);\n          span?.setStatus({\n            code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n            message: `Unexpected session action`,\n          });\n          res.json({\n            text:\n              `Unexpected action button (error code: ${errorId})\\n\\n` +\n              `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        return;\n      }\n\n      /**\n       * A user clicked vote point button\n       */\n      case 'vote': {\n        await InteractivityRoute.vote({ payload, team, session, res });\n        return;\n      }\n\n      /**\n       * Unexpected action\n       */\n      default: {\n        const errorId = generateId();\n        logger.error({\n          msg: `Unexpected action`,\n          errorId,\n          action,\n          payload,\n        });\n        span?.setAttribute('error.id', errorId);\n        span?.setStatus({\n          code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n          message: `Unexpected action`,\n        });\n        return res.json({\n          text:\n            `Unexpected action (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user clicks a submit button a view\n   */\n  @Trace()\n  static async viewSubmission({\n    payload, // action request payload\n    res,\n  }: {\n    payload: IViewSubmissionActionPayload;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      teamId: payload.team.id,\n      teamDomain: payload.team.domain,\n      userId: payload.user.id,\n      userName: payload.user.name,\n    });\n\n    const [teamGetErr, team] = await to(TeamStore.findById(payload.team.id));\n    if (teamGetErr) {\n      const errorId = generateId();\n      logger.error({\n        msg: `Could not create session, could not get the team from db`,\n        errorId,\n        err: teamGetErr,\n        payload,\n      });\n      span?.setAttribute('error.id', errorId);\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: teamGetErr.message,\n      });\n      return res.json({\n        text:\n          `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n          `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (!team) {\n      logger.info({\n        msg: `Could not create session, team could not be found`,\n        payload,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.NOT_FOUND,\n        message: 'Team not found',\n      });\n      return res.json({\n        text: `Your Slack team (${payload.team.domain}) could not be found, please reinstall Poker Planner on <${process.env.APP_INSTALL_LINK}>`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    const callbackId = payload.view.callback_id;\n    span?.setAttributes({ callbackId });\n\n    switch (callbackId) {\n      case 'newSessionModal:submit': {\n        return InteractivityRoute.createSession({ payload, team, res });\n      }\n\n      default: {\n        const errorId = generateId();\n        logger.error({\n          msg: `Unexpected view-submission action callbackId`,\n          errorId,\n          callbackId,\n          payload,\n        });\n        span?.setAttribute('error.id', errorId);\n        span?.setStatus({\n          code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n          message: `Unexpected callback_id`,\n        });\n        return res.json({\n          text:\n            `Unexpected view-submission callback id (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`,\n          response_type: 'ephemeral',\n          replace_original: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * A user submits the `new session` modal.\n   */\n  @Trace()\n  static async createSession({\n    payload, // action request payload\n    team,\n    res,\n  }: {\n    payload: IViewSubmissionActionPayload;\n    team: ITeam;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n\n    try {\n      span?.setAttributes({\n        rawPrivateMetadata: payload.view.private_metadata,\n      });\n      const privateMetadata = JSON.parse(payload.view.private_metadata);\n      const titleInputState = payload.view.state.values.title as any;\n      const title = titleInputState[Object.keys(titleInputState)[0]].value;\n      span?.setAttributes({ title });\n\n      if (!title || title.trim().length == 0) {\n        throw new Error(SessionControllerErrorCode.TITLE_REQUIRED);\n      }\n\n      const participantsInputState = payload.view.state.values\n        .participants as any;\n      const participants =\n        participantsInputState[Object.keys(participantsInputState)[0]]\n          .selected_users;\n      span?.setAttributes({ participants: participants.join(' ') });\n\n      if (participants.length == 0) {\n        throw new Error(SessionControllerErrorCode.NO_PARTICIPANTS);\n      }\n\n      const pointsInputState = payload.view.state.values.points as any;\n      const pointsStr =\n        pointsInputState[Object.keys(pointsInputState)[0]].value || '';\n      let points: string[] = uniq(pointsStr.match(/\\S+/g)) || [];\n      span?.setAttributes({ points: pointsStr });\n\n      if (points.length == 1 && points[0] == 'reset') {\n        points = DEFAULT_POINTS;\n      }\n\n      if (points.length < 2 || points.length > 25) {\n        throw new Error(SessionControllerErrorCode.INVALID_POINTS);\n      }\n\n      const otherCheckboxesState = payload.view.state.values.other as any;\n      const selectedOptions = otherCheckboxesState\n        ? otherCheckboxesState[Object.keys(otherCheckboxesState)[0]]\n            .selected_options\n        : [];\n      const isProtected = !!find(\n        selectedOptions,\n        (option) => option.value == 'protected'\n      );\n      const calculateAverage = !!find(\n        selectedOptions,\n        (option) => option.value == 'average'\n      );\n      span?.setAttributes({ isProtected: `${isProtected}` });\n      span?.setAttributes({ calculateAverage: `${calculateAverage}` });\n\n      // Create session struct\n      const session: ISession = {\n        id: generateId(),\n        expiresAt: Date.now() + Number(process.env.SESSION_TTL),\n        title,\n        points,\n        votes: {},\n        state: 'active',\n        channelId: privateMetadata.channelId,\n        userId: payload.user.id,\n        participants,\n        rawPostMessageResponse: undefined,\n        protected: isProtected,\n        average: calculateAverage,\n      };\n      span?.setAttributes({\n        sessionId: session.id,\n        channelId: privateMetadata.channelId,\n        userId: payload.user.id,\n        userName: payload.user.name,\n      });\n\n      logger.info({\n        msg: `Creating a new session`,\n        team: {\n          id: team.id,\n          name: team.name,\n        },\n        user: {\n          id: payload.user.id,\n          name: payload.user.name,\n        },\n        channelId: privateMetadata.channelId,\n        sessionId: session.id,\n      });\n\n      const postMessageResponse = await SessionController.postMessage(\n        session,\n        team\n      );\n      session.rawPostMessageResponse = postMessageResponse as any;\n\n      SessionStore.upsert(session);\n\n      res.send();\n\n      const [upsertSettingErr] = await to(\n        TeamStore.upsertSettings(team.id, session.channelId, {\n          [ChannelSettingKey.PARTICIPANTS]: session.participants.join(' '),\n          [ChannelSettingKey.POINTS]: session.points.join(' '),\n          [ChannelSettingKey.PROTECTED]: JSON.stringify(session.protected),\n          [ChannelSettingKey.AVERAGE]: JSON.stringify(session.average),\n        })\n      );\n      if (upsertSettingErr) {\n        span?.addEvent('upsert_settings_error', {\n          message: upsertSettingErr.message,\n        });\n        logger.error({\n          msg: `Could not upsert settings after creating new session`,\n          session,\n          err: upsertSettingErr,\n        });\n      }\n\n      if (process.env.COUNTLY_APP_KEY) {\n        Countly.add_event({\n          key: 'topic_created',\n          count: 1,\n          segmentation: {\n            participants: session.participants.length,\n          },\n        });\n      }\n    } catch (err) {\n      const errorId = generateId();\n      let shouldLog = true;\n      let logLevel: 'info' | 'warn' | 'error' = 'error';\n      let errorMessage =\n        `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n        `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`;\n      let modalErrors: { [key: string]: string } = {};\n\n      const slackErrorCode = err.data && err.data.error;\n      if (slackErrorCode) {\n        span?.setAttributes({ slackErrorCode });\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\" (error code: ${errorId})\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}>`;\n      }\n\n      /**\n       * Slack API platform errors\n       */\n      if (slackErrorCode == 'not_in_channel') {\n        shouldLog = false;\n        errorMessage =\n          `Poker Planner app is not added to this channel. ` +\n          `Please try again after adding it. ` +\n          `You can simply add the app just by mentioning it, like \"*@poker_planner*\".`;\n      } else if (slackErrorCode == 'channel_not_found') {\n        shouldLog = false;\n        errorMessage =\n          `Oops, we couldn't find this channel. ` +\n          `Are you sure that Poker Planner app is added to this channel/conversation? ` +\n          `You can simply add the app by mentioning it, like \"*@poker_planner*\". ` +\n          `However this may not work in Group DMs, you need to explicitly add it as a ` +\n          `member from conversation details menu. Please try again after adding it.`;\n      } else if (slackErrorCode == 'token_revoked') {\n        logLevel = 'info';\n        errorMessage =\n          `Poker Planner's access has been revoked for this workspace. ` +\n          `In order to use it, you need to install the app again on ` +\n          `<${process.env.APP_INSTALL_LINK}>`;\n      } else if (slackErrorCode == 'method_not_supported_for_channel_type') {\n        logLevel = 'info';\n        errorMessage = `Poker Planner cannot be used in this type of conversations.`;\n      } else if (slackErrorCode == 'missing_scope') {\n        if (err.data.needed == 'mpim:read') {\n          logLevel = 'info';\n          errorMessage =\n            `Poker Planner now supports Group DMs! However it requires ` +\n            `additional permissions that we didn't obtained previously. You need to visit ` +\n            `<${process.env.APP_INSTALL_LINK}> and reinstall the app to enable this feature.`;\n        } else if (err.data.needed == 'usergroups:read') {\n          logLevel = 'info';\n          errorMessage =\n            `Poker Planner now supports @usergroup mentions! However it requires ` +\n            `additional permissions that we didn't obtained previously. You need to visit ` +\n            `<${process.env.APP_INSTALL_LINK}> and reinstall the app to enable this feature.`;\n        }\n      } else if (\n        /**\n         * Internal errors\n         */\n        err.message == SessionControllerErrorCode.NO_PARTICIPANTS\n      ) {\n        shouldLog = false;\n        errorMessage = `You must add at least 1 person.`;\n        modalErrors = {\n          participants: errorMessage,\n        };\n      } else if (err.message == SessionControllerErrorCode.TITLE_REQUIRED) {\n        shouldLog = false;\n        errorMessage = `Title is required`;\n        modalErrors = {\n          title: errorMessage,\n        };\n      } else if (err.message == SessionControllerErrorCode.INVALID_POINTS) {\n        shouldLog = false;\n        errorMessage = `You must provide at least 2 poker points, the maximum is 25.`;\n        modalErrors = {\n          points: errorMessage,\n        };\n      }\n\n      if (shouldLog) {\n        logger[logLevel]({\n          msg: `Could not create session`,\n          errorId,\n          err,\n          payload,\n        });\n      }\n\n      span?.setAttributes({\n        'error.id': errorId,\n        userErrorMessage: errorMessage,\n      });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.UNKNOWN,\n        message: err.message,\n      });\n\n      // Show the generic errors on a new modal\n      if (isEmpty(modalErrors)) {\n        return res.json({\n          response_action: 'push',\n          view: {\n            type: 'modal',\n            title: {\n              type: 'plain_text',\n              text: 'Poker Planner',\n              emoji: true,\n            },\n            close: {\n              type: 'plain_text',\n              text: 'Close',\n              emoji: true,\n            },\n            blocks: [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `:x: ${errorMessage}`,\n                },\n              },\n            ],\n          },\n        });\n      }\n\n      // Show error on form elements\n      return res.json({\n        response_action: 'errors',\n        errors: modalErrors,\n      });\n    }\n  }\n\n  /**\n   * A user clicks on a vote button.\n   */\n  @Trace()\n  static async vote({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    const point = payload.actions[0].value;\n    span?.setAttributes({ point });\n    logger.info({\n      msg: `Voting`,\n      point,\n      sessionId: session.id,\n      team: {\n        id: team.id,\n        name: team.name,\n      },\n      user: {\n        id: payload.user.id,\n        name: payload.user.name,\n      },\n    });\n    const [voteErr] = await to(\n      SessionController.vote(session, team, payload.user.id, point)\n    );\n\n    if (voteErr) {\n      switch (voteErr.message) {\n        case SessionControllerErrorCode.SESSION_NOT_ACTIVE: {\n          return res.json({\n            text: `You cannot vote revealed or cancelled session`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        case SessionControllerErrorCode.ONLY_PARTICIPANTS_CAN_VOTE: {\n          return res.json({\n            text: `You are not a participant of that session`,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n\n        // Unknown error\n        default: {\n          const errorId = generateId();\n          let errorMessage =\n            `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n            `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`;\n\n          const slackErrorCode = (voteErr as any)?.data?.error;\n          if (slackErrorCode) {\n            span?.setAttributes({ slackErrorCode });\n            errorMessage =\n              `Unexpected Slack API Error: \"*${slackErrorCode}*\", please try again later (error code: ${errorId})\\n\\n` +\n              `If you think this is an issue, please report to <${process.env.ISSUES_LINK}>`;\n          }\n          if (slackErrorCode == 'channel_not_found') {\n            errorMessage =\n              `Unexpected Slack API Error: \"*${slackErrorCode}*\". Are you using Poker Planner on a shared channel? ` +\n              `Shared channels are not supported due to Slack API limitations.\\n\\n` +\n              `If you think this is an issue, please report to <${process.env.ISSUES_LINK}> with this error code: ${errorId}`;\n          }\n\n          logger.error({\n            msg: `Could not vote`,\n            errorId,\n            err: voteErr,\n            payload,\n          });\n          span?.setAttributes({ 'error.id': errorId });\n          span?.setStatus({\n            code: opentelemetry.CanonicalCode.INVALID_ARGUMENT,\n            message: `Unexpected vote error`,\n          });\n          return res.json({\n            text: errorMessage,\n            response_type: 'ephemeral',\n            replace_original: false,\n          });\n        }\n      }\n    }\n\n    // Successfully voted\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_voted',\n        count: 1,\n        segmentation: {\n          points: payload.actions[0].value,\n        },\n      });\n    }\n\n    return res.send();\n  }\n\n  /**\n   * A user clicks reveal button.\n   */\n  @Trace()\n  static async revealSession({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      sessionProtected: session.protected,\n      sessionCreatorId: session.userId,\n    });\n\n    if (session.protected && session.userId != payload.user.id) {\n      return res.json({\n        text: `This session is protected, only the creator can reveal it.`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    logger.info({\n      msg: `Revealing votes`,\n      sessionId: session.id,\n      team: {\n        id: team.id,\n        name: team.name,\n      },\n      user: {\n        id: payload.user.id,\n        name: payload.user.name,\n      },\n    });\n    const [revealErr] = await to(\n      SessionController.revealAndUpdateMessage(session, team, payload.user.id)\n    );\n\n    if (revealErr) {\n      const errorId = generateId();\n      let errorMessage =\n        `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n        `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`;\n\n      const slackErrorCode = (revealErr as any)?.data?.error;\n      if (slackErrorCode) {\n        span?.setAttributes({ slackErrorCode });\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\", please try again later (error code: ${errorId})\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}>`;\n      }\n      if (slackErrorCode == 'channel_not_found') {\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\". Are you using Poker Planner on a shared channel? ` +\n          `Shared channels are not supported due to Slack API limitations.\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}> with this error code: ${errorId}`;\n      }\n\n      logger.error({\n        msg: `Could not reveal session`,\n        errorId,\n        err: revealErr,\n        payload,\n      });\n      span?.setAttributes({ 'error.id': errorId });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: `Unexpected error while reveal session & update message`,\n      });\n      return res.json({\n        text: errorMessage,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_revealed',\n        count: 1,\n        segmentation: {},\n      });\n    }\n\n    return res.send();\n  }\n\n  /**\n   * A user clicks cancel button.\n   */\n  @Trace()\n  static async cancelSession({\n    payload, // action request payload\n    team,\n    session,\n    res,\n  }: {\n    payload: IInteractiveMessageActionPayload;\n    team: ITeam;\n    session: ISession;\n    res: express.Response;\n  }) {\n    const span = getSpan();\n    span?.setAttributes({\n      sessionProtected: session.protected,\n      sessionCreatorId: session.userId,\n    });\n\n    if (session.protected && session.userId != payload.user.id) {\n      return res.json({\n        text: `This session is protected, only the creator can cancel it.`,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    logger.info({\n      msg: `Cancelling session`,\n      sessionId: session.id,\n      team: {\n        id: team.id,\n        name: team.name,\n      },\n      user: {\n        id: payload.user.id,\n        name: payload.user.name,\n      },\n    });\n    const [cancelErr] = await to(\n      SessionController.cancelAndUpdateMessage(session, team, payload.user.id)\n    );\n\n    if (cancelErr) {\n      const errorId = generateId();\n      let errorMessage =\n        `Internal server error, please try again later (error code: ${errorId})\\n\\n` +\n        `If this problem is persistent, you can open an issue on <${process.env.ISSUES_LINK}>`;\n\n      const slackErrorCode = (cancelErr as any)?.data?.error;\n      if (slackErrorCode) {\n        span?.setAttributes({ slackErrorCode });\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\", please try again later (error code: ${errorId})\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}>`;\n      }\n      if (slackErrorCode == 'channel_not_found') {\n        errorMessage =\n          `Unexpected Slack API Error: \"*${slackErrorCode}*\". Are you using Poker Planner on a shared channel? ` +\n          `Shared channels are not supported due to Slack API limitations.\\n\\n` +\n          `If you think this is an issue, please report to <${process.env.ISSUES_LINK}> with this error code: ${errorId}`;\n      }\n\n      logger.error({\n        msg: `Could not cancel session`,\n        errorId,\n        err: cancelErr,\n        payload,\n      });\n      span?.setAttributes({ 'error.id': errorId });\n      span?.setStatus({\n        code: opentelemetry.CanonicalCode.INTERNAL,\n        message: `Unexpected error while cancel session & update message`,\n      });\n      return res.json({\n        text: errorMessage,\n        response_type: 'ephemeral',\n        replace_original: false,\n      });\n    }\n\n    if (process.env.COUNTLY_APP_KEY) {\n      Countly.add_event({\n        key: 'topic_cancelled',\n        count: 1,\n        segmentation: {},\n      });\n    }\n\n    return res.send();\n  }\n}\n","require('dotenv').config();\nimport {\n  BasicTracerProvider,\n  BatchSpanProcessor,\n} from '@opentelemetry/tracing';\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nsetupTracing();\n\nimport logger from './lib/logger';\nimport * as sqlite from './lib/sqlite';\nimport * as redis from './lib/redis';\nimport Countly from 'countly-sdk-nodejs';\nimport * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport * as exphbs from 'express-handlebars';\nimport { OAuthRoute } from './routes/oauth';\nimport { PPCommandRoute } from './routes/pp-command';\nimport { InteractivityRoute } from './routes/interactivity';\nimport prettyMilliseconds from 'pretty-ms';\nimport * as SessionStore from './session/session-model';\n\nasync function main() {\n  await sqlite.init();\n  if (process.env.USE_REDIS) {\n    await redis.init();\n    await SessionStore.restore();\n  }\n  await initServer();\n\n  // If countly env variables exists, start countly stat reporting\n  if (process.env.COUNTLY_APP_KEY && process.env.COUNTLY_URL) {\n    logger.info({\n      msg: `Initing countly`,\n      url: process.env.COUNTLY_URL,\n      appKey: process.env.COUNTLY_APP_KEY,\n    });\n    Countly.init({\n      app_key: process.env.COUNTLY_APP_KEY,\n      url: process.env.COUNTLY_URL,\n    });\n  }\n\n  logger.info({ msg: 'Boot successful!' });\n}\n\nasync function initServer(): Promise<void> {\n  const server = express();\n\n  // Setup handlebars\n  server.engine('html', exphbs({ extname: '.html' }));\n  server.set('view engine', 'html');\n  server.set('views', 'src/views'); // relative to process.cwd\n\n  // Parse body\n  server.use(bodyParser.urlencoded({ extended: false }));\n  server.use(bodyParser.json());\n\n  // Serve static files\n  server.use(process.env.BASE_PATH, express.static('src/public')); // relative to process.cwd\n\n  // Setup routes\n  initRoutes(server);\n\n  return new Promise((resolve, reject) => {\n    server.listen(process.env.PORT, (err) => {\n      if (err) return reject(err);\n      logger.info({ msg: `Server running`, port: process.env.PORT });\n      resolve();\n    });\n  });\n}\n\nfunction initRoutes(server: express.Express) {\n  const router = express.Router();\n  const humanReadableSessionTTL = prettyMilliseconds(\n    Number(process.env.SESSION_TTL),\n    { verbose: true }\n  );\n\n  router.get('/', (req, res, next) => {\n    res.render('index', {\n      layout: false,\n      data: {\n        SLACK_CLIENT_ID: process.env.SLACK_CLIENT_ID,\n        SLACK_SCOPE: process.env.SLACK_SCOPE,\n        SLACK_APP_ID: process.env.SLACK_APP_ID,\n        COUNTLY_URL: process.env.COUNTLY_URL,\n        COUNTLY_APP_KEY: process.env.COUNTLY_APP_KEY,\n        HUMAN_READABLE_SESSION_TTL: humanReadableSessionTTL,\n      },\n    });\n  });\n\n  router.get('/privacy', (req, res, next) => {\n    res.render('privacy', {\n      layout: false,\n      data: {\n        SLACK_APP_ID: process.env.SLACK_APP_ID,\n        COUNTLY_URL: process.env.COUNTLY_URL,\n        COUNTLY_APP_KEY: process.env.COUNTLY_APP_KEY,\n      },\n    });\n  });\n\n  router.get('/oauth', OAuthRoute.handle);\n  router.post('/slack/pp-command', PPCommandRoute.handle);\n  router.post('/slack/pp-slash-command', PPCommandRoute.handle);\n  router.post('/slack/action-endpoint', InteractivityRoute.handle);\n  router.post('/slack/interactivity', InteractivityRoute.handle);\n\n  router.get('/slack/direct-install', (req, res, next) => {\n    const url = `https://slack.com/oauth/v2/authorize?client_id=${process.env.SLACK_CLIENT_ID}&scope=${process.env.SLACK_SCOPE}`;\n    res.status(302).redirect(url);\n  });\n\n  // Serve under specified base path\n  server.use(`${process.env.BASE_PATH}`, router);\n}\n\nasync function setupTracing() {\n  const traceProvider = new BasicTracerProvider();\n  traceProvider.register();\n\n  if (!process.env.REPORT_TRACES) {\n    return;\n  }\n\n  const exporter = new JaegerExporter({\n    serviceName: 'pp',\n    tags: [],\n    host: process.env.JAEGER_HOST,\n    port: parseInt(process.env.JAEGER_PORT, 10),\n    logger: {\n      debug: () => {},\n      info: () => {},\n      warn: logger.warn.bind(logger),\n      error: logger.error.bind(logger),\n    },\n  });\n  traceProvider.addSpanProcessor(new BatchSpanProcessor(exporter));\n\n  logger.info({\n    msg: `Trace reporter started`,\n    jaegerAgent: {\n      host: process.env.JAEGER_HOST,\n      port: process.env.JAEGER_PORT,\n    },\n  });\n}\n\nmain().catch((err) => {\n  logger.error({ msg: 'Could not boot', err });\n  process.exit(1);\n});\n"],"sourceRoot":""}